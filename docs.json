{"success":true,"fetched_at":"2025-10-25T06:28:54.034Z","data":{"BRIEFING.md":"# SlideMint — Architecture Briefing\n_Last updated: 2025-10-22T18:27:22Z_ <!-- AUTO-DATE: do not remove -->\n\n## Overview\nSlideMint turns an eBay listing (URL or item ID) into a short MP4 slideshow.\n- **Frontend:** Next.js (App Router) on Vercel\n- **Auth & DB:** Supabase (Auth, Postgres, RLS)\n- **Storage:** Supabase (optional for logs), Render file links returned by backend\n- **Backend (video):** Node/Express on Render; Pipedream proxy endpoint supported\n- **Payments:** Lemon Squeezy (optional; credits top-ups)\n- **Email:** Brevo (transactional: verification, magic link, slideshow ready, low credits)\n- **Analytics/Logs (optional):** Supabase logs tables; Vercel analytics\n\n### Core User Flow\n1. User signs in (magic link) via Supabase Auth.\n2. UI accepts an eBay URL/ID ➜ calls `/api/slideshows/create`.\n3. API verifies session & available credits ➜ decrements via `rpc:decrement_credits`.\n4. API sends images/params to **Render backend** (or to **Pipedream** that forwards to Render).\n5. Backend returns a hosted MP4 URL + metadata.\n6. API writes a `slideshows` row; UI shows preview + **Download** and **Copy link**.\n7. Brevo email “Slideshow Ready” (optional) with the video link.\n8. If credits low after the job, send “Low Credits” email (optional) and show CTA.\n\n---\n\n## Frontend\n- **Framework:** Next.js 14+ (App Router)\n- **Key routes/components**\n  - `app/(shell)/dashboard/slideshows/page.tsx` — main generator UI\n  - `app/api/slideshows/create/route.ts` — secure server action endpoint\n  - `components/dashboard/*` — Header, Sidebar, Loader, Result card\n  - `lib/supabase/*` — client/server Supabase helpers\n  - `lib/api.ts` — API caller (client-side)\n  - `lib/constants.ts` — feature flags, timings, branding\n\n**Security**\n- All server routes check a Supabase session (cookies) and enforce a per-user credit guard.\n- API base URL is built from `API_BASE_URL | NEXT_PUBLIC_API_BASE | SLIDEMINT_API_URL`.\n\n---\n\n## Backend (Render)\n- **Endpoint:** `POST {API_BASE}/generate-proxy`\n- **Input:** `{ images: string[], durationSec?: number, fps?: number, transition?: \"none\"|\"fade\", watermark?: string }`\n- **Output:** `{ videoUrl: string, coverImage?: string, durationSec: number, itemId?: string }`\n\n**Notes**\n- Accepts either a *prepared images array* or *an eBay item ID/URL* (when implemented).\n- Returns a public video URL (hosted by backend or CDN) consumed directly by the frontend.\n\n---\n\n## Pipedream (Optional)\n- A simple relay: Frontend ➜ Next.js API ➜ **Pipedream** ➜ Render backend.\n- Useful when you want throttling/retry/observability without touching the frontend.\n\n---\n\n## Supabase\n- **Auth:** Magic link email sign-in enabled. Domains: `app.slidemint.openvaultgpt.com`\n- **Tables:** `profiles`, `user_credits`, `credit_ledger`, `slideshows`\n- **RPC:** `decrement_credits(user_id UUID, amount INT)` — atomic decrement w/ guard\n- **Policies:** Only owners can read/write their own rows; service role used in API route for server-side mutations that require bypass.\n\n**Credit Model**\n- On signup create `user_credits` row with `credits = <FREE_STARTING_CREDITS>`.\n- Each successful slideshow decrements 1 (or more) credit(s).\n- Ledger row appended per operation for audit.\n\n---\n\n## Payments (Lemon Squeezy)\n- **Use case:** Sell credit packs or subscriptions.\n- On webhook “order.paid”: identify user (via email/metadata) and increment `user_credits`.\n- Store LS product IDs in env.\n- Optional: show “Buy Credits” in UI; deep-link to hosted checkout.\n\n---\n\n## Emails (Brevo)\n- Templates:\n  - **Verify Email / Magic Link** — handled by Supabase or custom via Brevo\n  - **Slideshow Ready** — includes the video URL\n  - **Low Credits** — CTA to buy credits\n- Use a single sender domain (DKIM/SPF set) and template IDs in env.\n\n---\n\n## Errors & Retries\n- Client → API: use `withBackoff()` for fetch.\n- API → Backend: retries with exponential backoff; surface structured errors to UI.\n- If backend fails, no credit deducted. Deduct only on confirmed success.\n\n---\n\n## Environment\nSee `docs/gpt/ENV.example`.\n\n---\n\n## Data Protection\n- Only store minimal PII (email).\n- Videos are public by link; provide “Delete” action to remove slideshow record (does not delete from backend CDN unless integrated).\n- Comply with user deletion requests: remove profile + credits + slideshows where possible.\n\n---\n\n## Roadmap Hooks\n- Affiliate pack generation (image kit / overlays) — gated by role `affiliate = true`.\n- Dashboard metrics (views/plays) when backend emits lightweight web beacons.\n- CSV bulk import of item IDs with queued generation + email batch completion.\n","CODEMAP.md":"# CODEMAP — SlideMint Frontend\n_Generated seed. CI will refresh file tree and snippets on push to `main`._\n\n## File Tree (frontend)\n```txt\n```txt\n.\n├── .env.local\n├── .github\n│   └── workflows\n│       ├── gpt-brief.yml\n│       └── gpt-docs-mirror.yml\n├── .gitignore\n├── README.md\n├── app\n│   ├── (shell)\n│   │   ├── CreditsPill.tsx\n│   │   ├── dashboard\n│   │   │   ├── page.tsx\n│   │   │   └── slideshows\n│   │   └── layout.tsx\n│   ├── api\n│   │   ├── auth\n│   │   │   └── route.ts\n│   │   ├── bonus\n│   │   │   └── route.ts\n│   │   ├── credits\n│   │   │   ├── decrement\n│   │   │   └── route.ts\n│   │   ├── debug-auth\n│   │   │   └── route.ts\n│   │   ├── diagnostics\n│   │   │   └── route.ts\n│   │   ├── download\n│   │   │   └── route.ts\n│   │   ├── logout\n│   │   │   └── route.ts\n│   │   ├── me\n│   │   │   └── route.ts\n│   │   ├── slideshows\n│   │   │   ├── create\n│   │   │   └── list\n│   │   └── turnstile\n│   │       └── verify\n│   ├── auth\n│   │   ├── AuthClient.tsx\n│   │   └── page.tsx\n│   ├── globals.css\n│   ├── icon.png\n│   ├── layout.tsx\n│   ├── page.tsx\n│   └── welcome\n│       └── page.tsx\n├── components\n│   ├── AffiliatePanel.jsx\n│   ├── BrandLogo.tsx\n│   ├── BulkPanel.jsx\n│   ├── GeneratorPage.tsx\n│   ├── LicenseModal.jsx\n│   ├── LoadingBlock.jsx\n│   ├── LogoutButton.tsx\n│   ├── ResultBlock.jsx\n│   ├── Tabs.jsx\n│   └── dashboard\n│       ├── Header.tsx\n│       └── Sidebar.tsx\n├── docs\n│   └── gpt\n│       ├── BRIEFING.md\n│       ├── CODEMAP.md\n│       ├── ENV.example\n│       └── SUPABASE_SCHEMA.sql\n├── filelist-full.txt\n├── filelist.txt\n├── lib\n│   ├── constants.js\n│   ├── createSlideshow.ts\n│   ├── credits.ts\n│   ├── creditsBus.js\n│   ├── parsing.js\n│   ├── storage.js\n│   ├── supabase\n│   │   └── types.ts\n│   ├── supabaseClient.ts\n│   ├── supabaseServer.ts\n│   └── tips.js\n├── middleware.ts\n├── next-env.d.ts\n├── next.config.mjs\n├── package-lock.json\n├── package.json\n├── public\n│   ├── icons\n│   │   ├── .gitkeep\n│   │   ├── slidemint-192.png\n│   │   └── slidemint-512.png\n│   ├── manifest.webmanifest\n│   └── sw.js\n├── redeploy.js\n├── styles\n│   └── ui.css\n└── tsconfig.json\n\n33 directories, 63 files\n```\n","SUPABASE_SCHEMA.sql":"-- SlideMint — Supabase Schema (idempotent)\n-- Paste into Supabase > SQL editor, then RUN.\n\n-- ============= TABLES =============\ncreate table if not exists public.profiles (\n  user_id uuid primary key references auth.users(id) on delete cascade,\n  email text not null,\n  display_name text,\n  affiliate boolean default false,\n  created_at timestamptz default now()\n);\n\ncreate table if not exists public.user_credits (\n  user_id uuid primary key references auth.users(id) on delete cascade,\n  credits integer not null default 0,\n  updated_at timestamptz default now()\n);\n\ncreate table if not exists public.credit_ledger (\n  id bigserial primary key,\n  user_id uuid not null references auth.users(id) on delete cascade,\n  delta integer not null,\n  reason text not null,\n  ref text,\n  created_at timestamptz default now()\n);\n\ncreate table if not exists public.slideshows (\n  id bigserial primary key,\n  user_id uuid not null references auth.users(id) on delete cascade,\n  item_id text,\n  video_url text not null,\n  cover_image text,\n  meta jsonb,\n  created_at timestamptz default now()\n);\n\n-- ============= RLS =============\nalter table public.profiles enable row level security;\nalter table public.user_credits enable row level security;\nalter table public.credit_ledger enable row level security;\nalter table public.slideshows enable row level security;\n\n-- Drop old policies if they exist (so re-runs are clean)\ndrop policy if exists \"Own profile read\"   on public.profiles;\ndrop policy if exists \"Own profile upsert\" on public.profiles;\ndrop policy if exists \"Own profile update\" on public.profiles;\n\ndrop policy if exists \"Own credits read\"   on public.user_credits;\ndrop policy if exists \"Own credits update\" on public.user_credits;\n\ndrop policy if exists \"Own ledger read\"    on public.credit_ledger;\ndrop policy if exists \"Own ledger insert\"  on public.credit_ledger;\n\ndrop policy if exists \"Own slideshows read\"   on public.slideshows;\ndrop policy if exists \"Own slideshows insert\" on public.slideshows;\n\n-- Profiles\ncreate policy \"Own profile read\"\n  on public.profiles for select\n  using (auth.uid() = user_id);\n\ncreate policy \"Own profile upsert\"\n  on public.profiles for insert\n  with check (auth.uid() = user_id);\n\ncreate policy \"Own profile update\"\n  on public.profiles for update\n  using (auth.uid() = user_id)\n  with check (auth.uid() = user_id);\n\n-- Credits\ncreate policy \"Own credits read\"\n  on public.user_credits for select\n  using (auth.uid() = user_id);\n\ncreate policy \"Own credits update\"\n  on public.user_credits for update\n  using (auth.uid() = user_id)\n  with check (auth.uid() = user_id);\n\n-- Ledger (read-only to owner; inserts happen via RPC)\ncreate policy \"Own ledger read\"\n  on public.credit_ledger for select\n  using (auth.uid() = user_id);\n\n-- Slideshows\ncreate policy \"Own slideshows read\"\n  on public.slideshows for select\n  using (auth.uid() = user_id);\n\ncreate policy \"Own slideshows insert\"\n  on public.slideshows for insert\n  with check (auth.uid() = user_id);\n\n-- ============= FUNCTIONS (RPC) =============\n-- Atomic decrement (returns true/false). Logged in ledger.\ncreate or replace function public.decrement_credits(p_user_id uuid, p_amount int)\nreturns boolean\nlanguage plpgsql\nsecurity definer\nset search_path = public\nas $$\ndeclare current_credits int;\nbegin\n  select credits into current_credits\n  from public.user_credits\n  where user_id = p_user_id\n  for update;\n\n  if current_credits is null then\n    raise exception 'user_credits row missing for %', p_user_id;\n  end if;\n\n  if current_credits < p_amount then\n    return false;\n  end if;\n\n  update public.user_credits\n  set credits = credits - p_amount, updated_at = now()\n  where user_id = p_user_id;\n\n  insert into public.credit_ledger (user_id, delta, reason)\n  values (p_user_id, -p_amount, 'slideshow.generate');\n\n  return true;\nend;\n$$;\n\n-- Increment helper (webhooks, refunds, admin tools)\ncreate or replace function public.increment_credits(p_user_id uuid, p_amount int, p_reason text default 'topup', p_ref text default null)\nreturns void\nlanguage sql\nsecurity definer\nset search_path = public\nas $$\n  update public.user_credits\n  set credits = coalesce(credits,0) + p_amount, updated_at = now()\n  where user_id = p_user_id;\n\n  insert into public.credit_ledger (user_id, delta, reason, ref)\n  values (p_user_id, p_amount, p_reason, p_ref);\n$$;\n\n-- ============= AUTH TRIGGER (on signup) =============\ncreate or replace function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer\nset search_path = public\nas $$\nbegin\n  insert into public.profiles (user_id, email)\n  values (new.id, new.email)\n  on conflict (user_id) do nothing;\n\n  insert into public.user_credits (user_id, credits)\n  values (new.id, 3) -- FREE_STARTING_CREDITS\n  on conflict (user_id) do nothing;\n\n  return new;\nend;\n$$;\n\ndrop trigger if exists on_auth_user_created on auth.users;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row\n  execute function public.handle_new_user();\n\n-- ============= QUICK SMOKE TESTS (optional) =============\n-- -- 1) Ensure current user can only see own rows (run in auth context).\n-- select * from public.user_credits;\n\n-- -- 2) Manually call decrement (replace UUID) — expect true/false.\n-- select public.decrement_credits('00000000-0000-0000-0000-000000000000'::uuid, 1);\n\n-- -- 3) Backfill credits for existing users with no row (admin run):\n-- insert into public.user_credits (user_id, credits)\n-- select id, 3 from auth.users u\n-- where not exists (select 1 from public.user_credits c where c.user_id = u.id);\n","ENV.example":"# =====================================\n# SlideMint — Example Environment File\n# =====================================\n# This file lists all environment variables required\n# by the SlideMint frontend (Next.js on Vercel)\n# and its connected services (Supabase, Render backend, Brevo, Lemon Squeezy).\n# Copy this file to .env.local and replace placeholder values.\n\n# -------------------------\n# FRONTEND / GENERAL\n# -------------------------\nNEXT_PUBLIC_SITE_URL=https://app.slidemint.openvaultgpt.com\nNODE_ENV=production\n\n# -------------------------\n# SUPABASE\n# -------------------------\n# Public keys (safe to expose to the browser)\nNEXT_PUBLIC_SUPABASE_URL=https://your-supabase-instance.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_anon_key\n\n# Private server-only key (NEVER expose to client)\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n\n# -------------------------\n# BACKEND API (Render or Pipedream relay)\n# -------------------------\n# The Next.js API route reads these in priority order:\n# API_BASE_URL → NEXT_PUBLIC_API_BASE → SLIDEMINT_API_URL\n# Set whichever matches your deployment.\nAPI_BASE_URL=https://slidemint-api.onrender.com\nAPI_CREATE_PATH=/generate-proxy\n# Example optional Pipedream relay\n# NEXT_PUBLIC_API_BASE=https://your-pipedream-endpoint.m.pipedream.net\n# SLIDEMINT_API_URL=https://slidemint-api.onrender.com\n\n# -------------------------\n# BREVO (Transactional Email)\n# -------------------------\n# Used for slideshow-ready and low-credit notifications.\nBREVO_API_KEY=your_brevo_api_key\nBREVO_SENDER_EMAIL=notifications@yourdomain.com\nBREVO_SENDER_NAME=SlideMint\nBREVO_TPL_SLIDESHOW_READY=12\nBREVO_TPL_LOW_CREDITS=13\n\n# -------------------------\n# LEMON SQUEEZY (Payments)\n# -------------------------\n# Used to handle credit top-ups or subscriptions.\nLEMON_STORE_ID=your_store_id\nLEMON_PRODUCT_CREDIT_PACK=prod_xxxxx\nLEMON_SECRET=your_lemon_webhook_secret\nLEMON_WEBHOOK_SECRET=your_webhook_signing_secret\n\n# -------------------------\n# AFFILIATE / MARKETING (optional)\n# -------------------------\n# Used for analytics, campaign tagging, or partner programmes.\nEBAY_EPN_CAMPAIGN_ID=5339108119\nCUSTOM_BRAND_NAME=SlideMint\n\n# -------------------------\n# DEBUG / MISC\n# -------------------------\n# These flags can be used locally or in dev environments.\nENABLE_DEBUG_LOGGING=false\nSUPABASE_LOG_LEVEL=info\n","EMAIL_TEMPLATES.md":""}}